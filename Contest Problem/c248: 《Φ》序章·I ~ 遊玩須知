#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
using namespace std;



const long long MOD = 1000000007;

long long j[2500000] = { 1, 1, 2, 6 }, ans[1048577] = { 1, 1, 2, 5 };
long long pow(long long a, long long n){
	//快速冪
	//5^6  6->110
	//對應 5^4 5^2 5^1
	//1 -> 乘 0 -> 不乘
	//=5^2*5^4
	long long re;
	for (re = 1, a; n; n>>=1, a = a*a%MOD)
		if (n & 1) re = re*a%MOD;
	return re;
}
int main(){
	ios::sync_with_stdio(0); cin.tie(0);
	long long k;
	for (k = 4; k < 2500000; k++)
		j[k] = j[k - 1] * k%MOD;//j[k]=k!
	for (k = 3; k < 1048577; k++){
		ans[k] = j[2 * k];
		//x=x*a(-1) (mod p)
		/*
		a / b = x mod(5)
		x * 7 = 1 mod(5)
		x * 7 * 7(-1) = 1 * 7(-1) mod(5)
		x = 1 * 7(-1) mod(5)
		*/
		/*
		除法相當於乘倒數
		根據費馬小定理，當模數為質數 p ，那麼倒數即是 p-2 次方
		a^p =a(mod p)
		a^(p-1)=1(mod p)
		a^(p-2)*a=1(mod p)
		a(-1)=a^(p-2) (mod p)
		*/
		ans[k] *= pow(j[k], MOD - 2) % MOD; ans[k] %= MOD;
		ans[k] *= pow(j[k], MOD - 2) % MOD; ans[k] %= MOD;
		ans[k] *= pow(k+1, MOD - 2) % MOD; ans[k] %= MOD;
	}
	int t, n;
	cin >> t;
	while (t--)
		cin >> n, printf("%lld\n", ans[n]);
}

/*
二叉樹可能生長成的所有模樣的個數
n個節點的二叉樹(BTs)個數
假設為B(n)
n個點的BT 根的左子樹 若有i個節點,右子樹便有n-i-1個節點
子樹 總共n-1個 左邊0,右邊就有n-1個
因此 B(n)=sigma[B(i)*B(n-i-1)],where i=0 to (n-1)

B(n+1)=sigma[B(i)*B(n-i)],where i=0 to n
問題相當於 卡塔蘭數
c(2n,n)-c(2n,n+1)
=c(2n,n)/(n+1)
*/
