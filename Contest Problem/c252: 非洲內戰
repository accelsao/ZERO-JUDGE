#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
using namespace std;

char p[101][101];
int num[101][101];
int k[10];
int c,m,n,a;
void dfs(int i, int j, int c,int d){
	if (i<1 || j<1 || i>m || j>n||num[i][j]||p[i][j]-'0'!=d)return;
	num[i][j] = c;
	a++;
	for (int x = -1; x <= 1; x++)
		for (int y = -1; y <= 1; y++)
			dfs(i + x, j + y, c, d);
}
int main(){
ios::sync_with_stdio(0);
	cin.tie(0);
	while (cin >> m >> n, m){
		c = 0;
		for (int i = 0; i < 10; i++)k[i]=0;
		for (int i = 1; i <= m; i++)
			for (int j = 1; j <= n; j++)
				cin >> p[i][j];
		memset(num, 0, sizeof(num));
		for (int i = 1; i <= m; i++)
			for (int j = 1; j <= n; j++)
				if (!num[i][j] && p[i][j] - '0'){
					a = 0;
					dfs(i, j, ++c, p[i][j] - '0');
					k[p[i][j] - '0'] = max(k[p[i][j] - '0'], a);
				}
		int s = -1;
		for (int i = 1; i < 10; i++)
			if (k[i])
				s = max(s, k[i]);
		if (s>=c||!c)puts("peace");
		else puts("choas");
		
	}
}
