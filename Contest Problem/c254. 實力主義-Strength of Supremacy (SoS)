#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<unordered_map>
using namespace std;

struct student{
	//學力 品行 體能 
	int a, b, d;
	int num;
	char c;
}p[10001];
struct info{
	double x,s;//標準差,學力,號碼
        int n;
};
bool cmp(info a, info b){
	if (a.x == b.x)return a.n < b.n;
	return a.x < b.x;
}
int gcd(int a, int b){
	return b ? gcd(b, a%b) : a;
}
int g(int n, int k){
	return n == 1 ? 0 : (g(n - 1, k) + k) % n;
	//若n-1 編號為x n為 (x+k)%n
	//剩一人 編號為0
}
int main(){
	FILE *stream;
	//freopen_s(&stream, "c25404.in.txt","r", stdin);
	//freopen_s(&stream, "c25404.out.txt", "w", stdout);
	int t;
	cin >> t;
	//t = 156;
	//printf("%d\n", t);
	
	while (t--){
		//srand(t);
		int n;
		cin >> n;
		/*n = rand() % 5000 + 1;
		printf("%d\n", n);*/
		for (int i = 1; i <= n; i++){
			cin >> p[i].a >> p[i].b >> p[i].d >> p[i].c;
			/*p[i].a = 100;
			p[i].b = 500;
			p[i].d = rand() % 1000 + 1;
			p[i].c = rand() % 2 + 'B';
			printf("%d %d %d %c\n", p[i].a, p[i].b, p[i].d, p[i].c);*/
			p[i].num = i;
		}
		vector<student>v;
		v.push_back(p[1]);
		for (int i = 2; i <= n; i++){
			vector<student>tmp;
			
			for (int j = 0; j < v.size();){
				if (v[j].c != p[i].c&&v[j].a < p[i].a && v[j].b < p[i].b &&v[j].d < p[i].d){
					v.erase(v.begin() + j);
					continue;
				}
				j++;
			}
			
			v.push_back(p[i]);
		}
		if (v.size() == 1)
			printf("%d\n", v[0].num);
		else{


			vector<info>q;//標準差
			for (int i = 0; i < v.size(); i++){
				double x = (v[i].a + v[i].b + v[i].d), y;
				y = x; x /= 3.0;
				x = (v[i].a - x)*(v[i].a - x) + (v[i].b - x)*(v[i].b - x) + (v[i].d - x)*(v[i].d - x);
				x /= 3.0; x = sqrt(x);
				info pp = { x, y, i };
				q.push_back(pp);
			}
			
			sort(q.begin(), q.end(),cmp);
			double mid = 0;
			for (int i = q.size() / 2; i < q.size(); i++)
				mid += q[i].s;
			mid /= (q.size() + 1) / 2;
			vector<int>era;
			for (int i = q.size() / 2; i < q.size(); i++)
				if (q[i].s < mid)
					era.push_back(q[i].n);
			sort(era.begin(), era.end());
			for (int i = 0; i < era.size(); i++){
				int nn = era[i] - i;
				v.erase(v.begin() + nn);
			}


			vector<int>num_order;
			num_order.push_back(v[0].num);
			int n = v.size();
			int d = v[0].num;
			for (int i = 1; i < v.size(); i++){
				if (d){
					d = d *v[i].num / gcd(d, v[i].num);
					d %= n;
				}
				num_order.push_back(v[i].num);
			}
		//最小公倍數%v.size()+v.size =k
			
			int k = d + v.size();
			int s = g(v.size(), k);
			printf("%d\n", num_order[s]);
		}
	}
	//fclose(stdin);
	//fclose(stdout);
}
