#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
#include<set>
#include<string>
#include<sstream>
#include<vector>
#include<functional>
#include<unordered_map>
#include<stack>
using namespace std;


struct edge{
	int to, cap, pre;
	bool real;
};
struct eg{
	int to, vis;
};
vector<eg>E[103];
vector<edge>g[103];
int d[103];
int v[103], a[103];
int p[103], con[103];//群,連接
int n, m;
int s, t;
int sx, sy;
int bfs(){
	queue<int>q;
	q.push(s);
	for (int i = 0; i <= t; i++)a[i] = -1;
	a[s] = 0;
	while (!q.empty()){
		int u = q.front(); q.pop();
		for (int i = 0; i < g[u].size(); i++){
			edge &e = g[u][i];
			if (e.cap>0 && a[e.to]<0){
				a[e.to] = a[u] + 1;
				q.push(e.to);
			}
		}
	}
	return ~a[t];//if a[t]==-1 return 0 else return 1
}
int dfs(int u, int f){
	//if (u == t || !f)return f;
	if (u == t)return f;
	for (int &i = v[u]; i < g[u].size(); i++){//直接改變v[]的值 如果跑第二遍 會直接跳過return 0
		edge &e = g[u][i];
		if (a[e.to] == a[u] + 1 && e.cap > 0){
			int d = dfs(e.to, min(f, e.cap));
			if (d > 0){
				e.cap -= d;
				g[e.to][e.pre].cap += d;
				return d;
			}
		}
	}
	return 0;
}
int mf(){
	int flow = 0, f;
	while (bfs()){
		for (int i = 0; i <= t; i++)v[i] = 0;
		while ((f = dfs(s, 1e9)) >0)flow += f;
	}
	return flow;
}
stack<int>stk;
int find(int x){ return x == p[x] ? x : p[x] = find(p[x]); }
void euler(int u){
	for (int i = 0; i < E[u].size(); i++){
		eg &e = E[u][i];
		if (!e.vis){
			e.vis = 1;
			euler(e.to);
			stk.push(u);
		}
	}
}
int main(){
	int T;
	cin >> T;
	while (T--){
		cin >> n >> m;
		for (int i = 0; i <= n + 1; i++)
			d[i] = con[i] = 0, g[i].clear(), E[i].clear(), p[i] = i;
		int x, y; char c;
		s = 0, t = n + 1;
		for (int i = 0; i < m; i++){
			cin >> x >> y >> c;
			d[x]++, d[y]--;//+為出 -為入
			if (c == 'U'){
				g[x].push_back(edge{ y, 1, g[y].size(), 1 });
				g[y].push_back(edge{ x, 0, g[x].size() - 1, 0 });
			}
			else E[x].push_back(eg{ y, 0 });
			con[x]++, con[y]++;
			p[find(x)] = find(y);
		}
		int flag = 0, flow = 0, gp = 0;
		int cod;
		sx = sy = 0;
		cod = 0;
		for (int i = 1; i <= n; i++){
			if (d[i] & 1){
				flag = 1;
				cod++;
				if (d[i] == 1)
					if (g[i].size())
						sx = i;
					else sy = i;
				if (d[i] == -1)
					if (g[i].size())
						sy = i;
					else sx = i;
			}
			//出 s->x 入 x->t
			if (d[i] > 0){
				g[s].push_back(edge{ i, d[i] / 2, g[i].size(), 1 });//改變一條度數改變2 因此d[i] 要改變d[i]/2條 (d[i]必偶數否則無解)
				g[i].push_back(edge{ s, 0, g[s].size() - 1, 0 });
				flow += d[i] / 2;
			}
			else if (d[i] < 0){
				g[i].push_back(edge{ t, -d[i] / 2, g[t].size(), 1 });
				g[t].push_back(edge{ i, 0, g[i].size() - 1, 0 });
			}
			if (p[i] == i&&con[i])gp++;
		}
		if (gp > 1){//圖沒連通
			puts("No path");
			continue;
		}

		if (flag&&cod == 2){
			int sa=0, sb=0;
			
			d[sx]++, d[sy]--;
			if (d[sx] > 0)sa = 1;
			if (d[sy] < 0)sb = 1;
			/*for (int i = 1; i <= n; i++){
				if (d[i] > 0){
					g[s].push_back(edge{ i, d[i] / 2, g[i].size(), 1 });//改變一條度數改變2 因此d[i] 要改變d[i]/2條 (d[i]必偶數否則無解)
					g[i].push_back(edge{ s, 0, g[s].size() - 1, 0 });
					flow += d[i] / 2;
					
				}
				else if (d[i] < 0){
					g[i].push_back(edge{ t, -d[i] / 2, g[t].size(), 1 });
					g[t].push_back(edge{ i, 0, g[i].size() - 1, 0 });
				}
			}*/
			if (sa == 1){
				g[s].push_back(edge{ sx, d[sx] / 2, g[sx].size(), 1 });//改變一條度數改變2 因此d[i] 要改變d[i]/2條 (d[i]必偶數否則無解)
				g[sx].push_back(edge{ s, 0, g[s].size() - 1, 0 });
				flow += d[sx] / 2;
			}
			if(sb==1){
				g[sy].push_back(edge{ t, -d[sy] / 2, g[t].size(), 1 });
				g[t].push_back(edge{ sy, 0, g[sy].size() - 1, 0 });
				//flow += abs(d[sy]) / 2;
			}
			//E[sx].push_back(eg{ sy, 0 });
			int ss = mf();
			if (ss != flow)
				puts("No path");
			else{
				//E[sx].pop_back();
				for (int i = 1; i <= n; i++)
					for (int j = 0; j < g[i].size(); j++){
						edge &e = g[i][j];
						if (e.real&&e.to <= n)//將定向的無向圖加入 dfs找路
							if (e.cap>0)E[i].push_back(eg{ e.to, 0 });
							else E[e.to].push_back(eg{ i, 0 });
					}
				euler(1);
				if (stk.size() < m)puts("NO");
				else{
					while (!stk.empty()){
						printf("%d ", stk.top());
						stk.pop();
					}
					printf("%d\n", sx);
				}
			}
			continue;
		}
		else if(flag){
			puts("No path");
			continue;
		}
		if (!flag&& mf() != flow){
			puts("No path");
			continue;
		}

		for (int i = 1; i <= n; i++)
			for (int j = 0; j < g[i].size(); j++){
				edge &e = g[i][j];
				if (e.real&&e.to <= n)//將定向的無向圖加入 dfs找路
					if (e.cap>0)E[i].push_back(eg{ e.to, 0 });
					else E[e.to].push_back(eg{ i, 0 });
			}
		euler(1);
		while (!stk.empty()){
			printf("%d ", stk.top());
			stk.pop();
		}
		puts("1");
	}
}

/*
n m
1~n點
m條邊必須走
D單向 U雙向
求歐拉環
沒有環or沒有每個邊走到 無解

*/
-------------------------------測試測資
2
4 3
2 1 U
3 2 D
4 3 U
4 3
1 2 U
3 2 D
4 3 D

1
4 3
2 1 U
3 2 U
3 4 D
1
4 3
1 2 U
3 2 D
4 3 D

1
4 3
1 2 D
2 3 D
4 3 U

1
4 4
2 1 U
3 2 D
4 3 D
4 1 U

2
4 3
1 2 U
2 3 U
4 3 D
1
4 3
1 2 U
3 2 U
3 4 U
1
4 3
2 1 U
3 2 U
3 4 U

2
4 3
2 1 U
3 2 D
4 3 U
4 3
1 2 U
3 2 D
4 3 D
